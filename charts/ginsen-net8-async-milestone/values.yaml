# Default values for ginsen-net8-async-milestone.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount:
  api: 1
  worker: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository:
    api: ghcr.io/gin-sen/ginsen-net8-async-milestone-api
    worker: ghcr.io/gin-sen/ginsen-net8-async-milestone-worker
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag:
    api: "latest"
    worker: "latest"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is to override the chart name.
nameOverride: ""
fullnameOverride:
  api: ""
  worker: ""

env:
  api: []
  worker: [] 
  common:
    - name: TZ
      value: Europe/Paris

# This is for seting up the dotnet-monitor sidecar
monitor:
  api:
    enabled: true
    service:
      type: ClusterIP
      port: 80
      containerPort: 52323
      metricsPort: 52325
      metricsContainerPort: 52325
    istio:
      enabled: true
      hosts: ["monitor-api.mainframe.local"]
      gateways: ["istio-ingress/istio-ingress-gateway"]
    resources:
      requests:
        cpu: 50m
        memory: 32Mi
      limits:
        cpu: 250m
        memory: 256Mi
  worker:
    enabled: true
    service:
      type: ClusterIP
      port: 80
      containerPort: 52323
      metricsPort: 52325
      metricsContainerPort: 52325
    istio:
      enabled: true
      hosts: ["monitor-worker.mainframe.local"]
      gateways: ["istio-ingress/istio-ingress-gateway"]
    resources:
      requests:
        cpu: 50m
        memory: 32Mi
      limits:
        cpu: 250m
        memory: 256Mi


# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  api:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname milestone
    name: ""
  worker:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname milestone
    name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations:
  api:
  worker: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels:
  api: {}
  worker:
    sidecar.istio.io/inject: "false"

podSecurityContext:
  api: {}
  worker: {}
  # fsGroup: 2000

securityContext:
  api: {}
  worker: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  api:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 80
    containerPort: 80

istio:
  api: 
    enabled: true
    gateways: ["istio-ingress/istio-ingress-gateway"]
    hosts: ["test.mainframe.local"]
    prefix: "/"
  worker: {}

resources:
  api:
    limits:
      cpu: 250m
      memory: 512Mi
  worker:
    limits:
      cpu: 250m
      memory: 512Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  api:
    httpGet:
      path: /
      port: http
  worker: {}
readinessProbe:
  api:
    httpGet:
      path: /
      port: http
  worker: {}

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  api:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  worker:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  api: []
  worker: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  api: []
  worker: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Dotnet Monitor volumes on the output Deployment definition.
volumesMonitor:
  api: 
    - name: diagvol
      emptyDir: {}
  worker: 
    - name: diagvol
      emptyDir: {}

# Dotnet Monitor volumeMounts on the output Deployment definition.
volumeMountsMonitor:
  api: 
  # if monitor.api.enabled is true then add the following volume mount
    - mountPath: /diag
      name: diagvol
  worker: 
  # if monitor.worker.enabled is true then add the following volume mount
    - mountPath: /diag
      name: diagvol

nodeSelector:
  api: {}
  worker: {}

tolerations:
  api: []
  worker: []

affinity:
  api: {}
  worker: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
